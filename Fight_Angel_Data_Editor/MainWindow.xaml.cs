using System;
using System.Windows;

namespace Fight_Angel_Data_Editor
{
    class Utils
    {
        public static int IndexOf(byte[] blob, byte[] tag, int offset, byte[] mask = null, int maxOffset = -1)
        {
            if (maxOffset < 0 || blob.Length < maxOffset)
            {
                maxOffset = blob.Length;
            }
            int hit = 0;
            for (int i = offset; i < maxOffset; i++)
            {
                if (blob[i] == tag[hit] || (mask != null && mask[hit] == 0xFF))
                {
                    hit++;
                }
                else
                {
                    hit = 0;
                }

                if (tag.Length == hit)
                {
                    return i - tag.Length + 1;
                }
            }
            return -1;
        }
    }

    /// <summary>
    /// Interaction logic for MainWindow.xaml
    /// </summary>
    public partial class MainWindow : Window
    {
        public MainWindow()
        {
            InitializeComponent();
        }

        private void b_scaler_run(object sender, RoutedEventArgs e)
        {
            error_label.Content = "Working...";
            manipulate_breast_max_scaling();
            error_label.Content = "Success";
            e.Handled = true;
        }

        private void manipulate_breast_max_scaling()
        {
            var file_name = get_file_name();
            var blob = load_save_file(file_name);

            byte[] tag =
            {
                0x52, 0x6F, 0x6C, 0x65, 0x50, 0x69, 0x6E, 0x63, 0x68, 0x00, 0x00, 0x00, 0x19, 0x1D, 0x00, 0x00,
                0x49, 0x44, 0x2C, 0x73, 0x75, 0x62, 0x49, 0x44, 0x2C, 0x6E, 0x61, 0x6D, 0x65, 0x2C, 0x64, 0x65,
                0x66, 0x61, 0x75, 0x6C, 0x74, 0x56, 0x61, 0x75, 0x6C, 0x65, 0x2C, 0x62, 0x6F, 0x6E, 0x65, 0x4E,
                0x61, 0x6D, 0x65, 0x2C, 0x70, 0x78, 0x2C, 0x70, 0x78, 0x4D, 0x61, 0x78, 0x2C, 0x70, 0x79, 0x2C,
                0x70, 0x79, 0x4D, 0x61, 0x78, 0x2C, 0x70, 0x7A, 0x2C, 0x70, 0x7A, 0x4D, 0x61, 0x78, 0x2C, 0x72,
                0x78, 0x2C, 0x72, 0x78, 0x4D, 0x61, 0x78, 0x2C, 0x72, 0x79, 0x2C, 0x72, 0x79, 0x4D, 0x61, 0x78,
                0x2C, 0x72, 0x7A, 0x2C, 0x72, 0x7A, 0x4D, 0x61, 0x78, 0x2C, 0x73, 0x78, 0x2C, 0x73, 0x78, 0x4D,
                0x61, 0x78, 0x2C, 0x73, 0x79, 0x2C, 0x73, 0x79, 0x4D, 0x61, 0x78, 0x2C, 0x73, 0x7A, 0x2C, 0x73,
                0x7A, 0x4D, 0x61, 0x78, 0x0D, 0x0A, 0x69, 0x6E, 0x74, 0x2C, 0x69, 0x6E, 0x74, 0x2C, 0x73, 0x74,
                0x72, 0x69, 0x6E, 0x67, 0x2C, 0x69, 0x6E, 0x74, 0x2C, 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2C,
                0x69, 0x6E, 0x74, 0x2C, 0x69, 0x6E, 0x74, 0x2C, 0x69, 0x6E, 0x74, 0x2C, 0x69, 0x6E, 0x74, 0x2C,
                0x69, 0x6E, 0x74, 0x2C, 0x69, 0x6E, 0x74, 0x2C, 0x69, 0x6E, 0x74, 0x2C, 0x69, 0x6E, 0x74, 0x2C,
                0x69, 0x6E, 0x74, 0x2C, 0x69, 0x6E, 0x74, 0x2C, 0x69, 0x6E, 0x74, 0x2C, 0x69, 0x6E, 0x74, 0x2C,
                0x69, 0x6E, 0x74, 0x2C, 0x69, 0x6E, 0x74, 0x2C, 0x69, 0x6E, 0x74, 0x2C, 0x69, 0x6E, 0x74, 0x2C,
                0x69, 0x6E, 0x74, 0x2C, 0x69, 0x6E, 0x74, 0x0D, 0x0A, 0x30, 0x2C, 0x30, 0x2C, 0xE8, 0xBA, 0xAB,
                0xE9, 0xAB, 0x98, 0x2C, 0x35, 0x30, 0x2C, 0x63, 0x73, 0x52, 0x6F, 0x6F, 0x74, 0x2C, 0x30, 0x2C,
                0x30, 0x2C, 0x30, 0x2C, 0x30, 0x2C, 0x30, 0x2C, 0x30, 0x2C, 0x30, 0x2C, 0x30, 0x2C, 0x30, 0x2C,
                0x30, 0x2C, 0x30, 0x2C, 0x30, 0x2C, 0x39, 0x30, 0x30, 0x2C, 0x31, 0x31, 0x30, 0x30, 0x2C, 0x39,
                0x30, 0x30, 0x2C, 0x31, 0x31, 0x30, 0x30, 0x2C, 0x39, 0x30, 0x30, 0x2C, 0x31, 0x31, 0x30, 0x30,
                0x0D, 0x0A
            };

            byte[] mask = tag;
            byte[] next =
            {
                0x0D, 0x0A, 0x35, 0x2C, 0x32, 0x2C, 0xE4, 0xB9, 0xB3, 0xE6, 0x88, 0xBF, 0xE4, 0xB8, 0x8A, 0xE4,
                0xB8, 0x8B, 0x2C, 0x36, 0x30, 0x2C, 0x63, 0x66, 0x5F, 0x4A, 0x5F, 0x4D, 0x75, 0x6E, 0x65, 0x30
            };
            byte[] patch_data_default =
            {
                0x31, 0x2C, 0x31, 0x2C, 0xE4, 0xB9, 0xB3, 0xE6, 0x88, 0xBF, 0xE5, 0xA4, 0xA7, 0xE5, 0xB0, 0x8F,
                0x2C, 0x36, 0x30, 0x2C, 0x63, 0x66, 0x5F, 0x4A, 0x5F, 0x4D, 0x75, 0x6E, 0x65, 0x30, 0x31, 0x5F,
                0x73, 0x5F, 0x4C, 0x2C, 0x30, 0x2C, 0x30, 0x2C, 0x30, 0x2C, 0x30, 0x2C, 0x30, 0x2C, 0x30, 0x2C,
                0x30, 0x2C, 0x30, 0x2C, 0x30, 0x2C, 0x30, 0x2C, 0x30, 0x2C, 0x30, 0x2C, 0x35, 0x32, 0x30, 0x2C,
                0x31, 0x33, 0x32, 0x30, 0x2C, 0x35, 0x32, 0x30, 0x2C, 0x31, 0x33, 0x32, 0x30, 0x2C, 0x35, 0x32,
                0x30, 0x2C, 0x31, 0x33, 0x32, 0x30, 0x0D, 0x0A, 0x32, 0x2C, 0x31, 0x2C, 0xE4, 0xB9, 0xB3, 0xE6,
                0x88, 0xBF, 0xE5, 0xA4, 0xA7, 0xE5, 0xB0, 0x8F, 0x2C, 0x36, 0x30, 0x2C, 0x63, 0x66, 0x5F, 0x4A,
                0x5F, 0x4D, 0x75, 0x6E, 0x65, 0x30, 0x32, 0x5F, 0x73, 0x5F, 0x4C, 0x2C, 0x30, 0x2C, 0x30, 0x2C,
                0x30, 0x2C, 0x30, 0x2C, 0x30, 0x2C, 0x30, 0x2C, 0x30, 0x2C, 0x30, 0x2C, 0x30, 0x2C, 0x30, 0x2C,
                0x30, 0x2C, 0x30, 0x2C, 0x38, 0x38, 0x30, 0x2C, 0x31, 0x30, 0x34, 0x30, 0x2C, 0x38, 0x38, 0x30,
                0x2C, 0x31, 0x30, 0x34, 0x30, 0x2C, 0x38, 0x38, 0x30, 0x2C, 0x31, 0x30, 0x34, 0x30, 0x0D, 0x0A,
                0x33, 0x2C, 0x31, 0x2C, 0xE4, 0xB9, 0xB3, 0xE6, 0x88, 0xBF, 0xE5, 0xA4, 0xA7, 0xE5, 0xB0, 0x8F,
                0x2C, 0x36, 0x30, 0x2C, 0x63, 0x66, 0x5F, 0x4A, 0x5F, 0x4D, 0x75, 0x6E, 0x65, 0x30, 0x31, 0x5F,
                0x73, 0x5F, 0x52, 0x2C, 0x30, 0x2C, 0x30, 0x2C, 0x30, 0x2C, 0x30, 0x2C, 0x30, 0x2C, 0x30, 0x2C,
                0x30, 0x2C, 0x30, 0x2C, 0x30, 0x2C, 0x30, 0x2C, 0x30, 0x2C, 0x30, 0x2C, 0x35, 0x32, 0x30, 0x2C,
                0x31, 0x33, 0x32, 0x30, 0x2C, 0x35, 0x32, 0x30, 0x2C, 0x31, 0x33, 0x32, 0x30, 0x2C, 0x35, 0x32,
                0x30, 0x2C, 0x31, 0x33, 0x32, 0x30, 0x0D, 0x0A, 0x34, 0x2C, 0x31, 0x2C, 0xE4, 0xB9, 0xB3, 0xE6,
                0x88, 0xBF, 0xE5, 0xA4, 0xA7, 0xE5, 0xB0, 0x8F, 0x2C, 0x36, 0x30, 0x2C, 0x63, 0x66, 0x5F, 0x4A,
                0x5F, 0x4D, 0x75, 0x6E, 0x65, 0x30, 0x32, 0x5F, 0x73, 0x5F, 0x52, 0x2C, 0x30, 0x2C, 0x30, 0x2C,
                0x30, 0x2C, 0x30, 0x2C, 0x30, 0x2C, 0x30, 0x2C, 0x30, 0x2C, 0x30, 0x2C, 0x30, 0x2C, 0x30, 0x2C,
                0x30, 0x2C, 0x30, 0x2C, 0x38, 0x38, 0x30, 0x2C, 0x31, 0x30, 0x34, 0x30, 0x2C, 0x38, 0x38, 0x30,
                0x2C, 0x31, 0x30, 0x34, 0x30, 0x2C, 0x38, 0x38, 0x30, 0x2C, 0x31, 0x30, 0x34, 0x30
            };
            byte[] patch_data_60 =
            {
                0x31, 0x2C, 0x31, 0x2C, 0xE4, 0xB9, 0xB3, 0xE6, 0x88, 0xBF, 0xE5, 0xA4, 0xA7, 0xE5, 0xB0, 0x8F,
                0x2C, 0x36, 0x30, 0x2C, 0x63, 0x66, 0x5F, 0x4A, 0x5F, 0x4D, 0x75, 0x6E, 0x65, 0x30, 0x31, 0x5F,
                0x73, 0x5F, 0x4C, 0x2C, 0x30, 0x2C, 0x30, 0x2C, 0x30, 0x2C, 0x30, 0x2C, 0x30, 0x2C, 0x30, 0x2C,
                0x30, 0x2C, 0x30, 0x2C, 0x30, 0x2C, 0x30, 0x2C, 0x30, 0x2C, 0x30, 0x2C, 0x35, 0x32, 0x30, 0x2C,
                0x32, 0x31, 0x31, 0x32, 0x2C, 0x35, 0x32, 0x30, 0x2C, 0x32, 0x31, 0x31, 0x32, 0x2C, 0x35, 0x32,
                0x30, 0x2C, 0x32, 0x31, 0x31, 0x32, 0x0D, 0x0A, 0x32, 0x2C, 0x31, 0x2C, 0xE4, 0xB9, 0xB3, 0xE6,
                0x88, 0xBF, 0xE5, 0xA4, 0xA7, 0xE5, 0xB0, 0x8F, 0x2C, 0x36, 0x30, 0x2C, 0x63, 0x66, 0x5F, 0x4A,
                0x5F, 0x4D, 0x75, 0x6E, 0x65, 0x30, 0x32, 0x5F, 0x73, 0x5F, 0x4C, 0x2C, 0x30, 0x2C, 0x30, 0x2C,
                0x30, 0x2C, 0x30, 0x2C, 0x30, 0x2C, 0x30, 0x2C, 0x30, 0x2C, 0x30, 0x2C, 0x30, 0x2C, 0x30, 0x2C,
                0x30, 0x2C, 0x30, 0x2C, 0x38, 0x38, 0x30, 0x2C, 0x31, 0x36, 0x36, 0x34, 0x2C, 0x38, 0x38, 0x30,
                0x2C, 0x31, 0x36, 0x36, 0x34, 0x2C, 0x38, 0x38, 0x30, 0x2C, 0x31, 0x36, 0x36, 0x34, 0x0D, 0x0A,
                0x33, 0x2C, 0x31, 0x2C, 0xE4, 0xB9, 0xB3, 0xE6, 0x88, 0xBF, 0xE5, 0xA4, 0xA7, 0xE5, 0xB0, 0x8F,
                0x2C, 0x36, 0x30, 0x2C, 0x63, 0x66, 0x5F, 0x4A, 0x5F, 0x4D, 0x75, 0x6E, 0x65, 0x30, 0x31, 0x5F,
                0x73, 0x5F, 0x52, 0x2C, 0x30, 0x2C, 0x30, 0x2C, 0x30, 0x2C, 0x30, 0x2C, 0x30, 0x2C, 0x30, 0x2C,
                0x30, 0x2C, 0x30, 0x2C, 0x30, 0x2C, 0x30, 0x2C, 0x30, 0x2C, 0x30, 0x2C, 0x35, 0x32, 0x30, 0x2C,
                0x32, 0x31, 0x31, 0x32, 0x2C, 0x35, 0x32, 0x30, 0x2C, 0x32, 0x31, 0x31, 0x32, 0x2C, 0x35, 0x32,
                0x30, 0x2C, 0x32, 0x31, 0x31, 0x32, 0x0D, 0x0A, 0x34, 0x2C, 0x31, 0x2C, 0xE4, 0xB9, 0xB3, 0xE6,
                0x88, 0xBF, 0xE5, 0xA4, 0xA7, 0xE5, 0xB0, 0x8F, 0x2C, 0x36, 0x30, 0x2C, 0x63, 0x66, 0x5F, 0x4A,
                0x5F, 0x4D, 0x75, 0x6E, 0x65, 0x30, 0x32, 0x5F, 0x73, 0x5F, 0x52, 0x2C, 0x30, 0x2C, 0x30, 0x2C,
                0x30, 0x2C, 0x30, 0x2C, 0x30, 0x2C, 0x30, 0x2C, 0x30, 0x2C, 0x30, 0x2C, 0x30, 0x2C, 0x30, 0x2C,
                0x30, 0x2C, 0x30, 0x2C, 0x38, 0x38, 0x30, 0x2C, 0x31, 0x36, 0x36, 0x34, 0x2C, 0x38, 0x38, 0x30,
                0x2C, 0x31, 0x36, 0x36, 0x34, 0x2C, 0x38, 0x38, 0x30, 0x2C, 0x31, 0x36, 0x36, 0x34
            };
            byte[] patch = new byte[tag.Length + patch_data_60.Length];
            Buffer.BlockCopy(tag, 0, patch, 0, tag.Length);
            Buffer.BlockCopy(patch_data_60, 0, patch, tag.Length, patch_data_60.Length);

            var new_blob = manipulateBytes(blob, tag, mask, next, patch);
            writeSaveFile(new_blob);
        }

        private byte[] manipulateBytes(byte[] blob, byte[] tag, byte[] mask, byte[] nextTag, byte[] patch)
        {
            int indexTag = int.MaxValue;
            var index = Utils.IndexOf(blob, tag, 0, mask);
            if (index < indexTag && index >= 0)
            {
                indexTag = index;
            }
            if (indexTag == int.MaxValue || indexTag == -1)
            {
                return null;
            }

            var indexNextTag = Utils.IndexOf(blob, nextTag, 0);

            if (indexNextTag == -1)
            {
                return null;
            }

            var result = new byte[blob.Length + 600];
            Buffer.BlockCopy(blob, 0, result, 0, indexTag + tag.Length);
            Buffer.BlockCopy(patch, 0, result, indexTag, patch.Length);
            Buffer.BlockCopy(blob, indexNextTag, result, indexTag + patch.Length, blob.Length - indexNextTag - patch.Length);

            return result;
        }

        private String get_file_name()
        {
            return "m:\\tmp\\test_data\\resources.assets";
        }
        private byte[] load_save_file(string file_name)
        {
            try
            {
                var blob = System.IO.File.ReadAllBytes(file_name);
                write_backup_save_file(blob);
                return blob;
            }
            catch (Exception)
            {
                var blob = new byte[0];
                return blob;
            }
        }

        private void write_backup_save_file(byte[] blob)
        {
            var new_file = get_file_name() + "_backup_" + DateTime.Now.ToString("yyyyMMddHHmmssffff");
            System.IO.File.WriteAllBytes(new_file, blob);
        }

        private void writeSaveFile(byte[] blob)
        {
            var new_file = get_file_name();
            System.IO.File.WriteAllBytes(new_file, blob);
        }
    }
}
